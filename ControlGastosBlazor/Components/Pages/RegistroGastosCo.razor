@page "/registro-gastos"
@rendermode InteractiveServer
@using ControlGastosBlazor.Components.Data
@using ControlGastosBlazor.Components.Entities
@using ControlGastosBlazor.Components.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject NavigationManager Navigation
@inject ProtectedLocalStorage Storage
@inject UserContext UsuarioContext

<h3>Registro de Gastos</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-danger">@mensaje</div>
}

@if (!string.IsNullOrEmpty(mensajeOk))
{
    <div class="alert alert-success">@mensajeOk</div>
}

<EditForm Model="@encabezado" OnValidSubmit="GuardarGasto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Fecha</label>
        <InputDate class="form-control" @bind-Value="encabezado.Fecha" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fondo Monetario</label>
        <select class="form-control" @bind="encabezado.FondoMonetarioId">
            <option value="">-- Seleccione --</option>
            @foreach (var fondo in fondos)
            {
                <option value="@fondo.Id">@fondo.Nombre</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Comercio</label>
        <InputText class="form-control" @bind-Value="encabezado.Comercio" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tipo Documento</label>
        <select class="form-control" @bind="encabezado.TipoDocumento">
            <option value="">-- Seleccione --</option>
            <option value="Factura">Factura</option>
            <option value="Comprobante">Comprobante</option>
            <option value="Otro">Otro</option>
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Observaciones</label>
        <InputTextArea class="form-control" @bind-Value="encabezado.Observaciones" />
    </div>

    <hr />
    <h5>Detalle del Gasto</h5>

    @foreach (var detalle in detalles)
    {
        <div class="row mb-2">
            <div class="col-6">
                <select class="form-control" @bind="detalle.TipoGastoId">
                    <option value="">-- Tipo de Gasto --</option>
                    @foreach (var tipo in tiposGasto)
                    {
                        <option value="@tipo.Id">@tipo.Nombre</option>
                    }
                </select>
            </div>
            <div class="col-4">
                <InputNumber class="form-control" @bind-Value="detalle.Monto" placeholder="Monto" />
            </div>
            <div class="col-2">
                <button type="button" class="btn btn-danger" @onclick="@(() => EliminarDetalle(detalle))">X</button>
            </div>
        </div>
    }

    <div class="d-flex gap-2">
        <button type="button" class="btn btn-secondary mb-3" @onclick="AgregarDetalle">+ Agregar Gasto</button>
        <button type="submit" class="btn btn-primary">Guardar Gasto</button>
    </div>

</EditForm>

@code {
    private List<GastoDetalle> detalles = new();
    private List<TipoGasto> tiposGasto = new();
    private List<FondoMonetario> fondos = new();
    private string mensaje = "";
    private string mensajeOk = "";
    private bool cargado = false;

    private Gasto encabezado = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !cargado)
        {
            var result = await Storage.GetAsync<string>("usuario");
            UsuarioContext.UsuarioId = result.Success ? result.Value ?? string.Empty : string.Empty;
            cargado = true;

            var usuarioId = await Db.Usuarios
            .Where(u => u.Username == UsuarioContext.UsuarioId)
            .Select(u => u.Id)
            .FirstOrDefaultAsync();

            encabezado.Fecha = DateTime.Today;
            encabezado.UsuarioId = usuarioId;
            StateHasChanged();
        }
   
    }
    protected override async Task OnInitializedAsync()
    {
        tiposGasto = await Db.TipoGastos.ToListAsync();
        fondos = await Db.FondoMonetarios.ToListAsync();
        AgregarDetalle();
    }

    void AgregarDetalle()
    {
        detalles.Add(new GastoDetalle());
    }

    void EliminarDetalle(GastoDetalle detalle)
    {
        detalles.Remove(detalle);
    }

    async Task GuardarGasto()
    {
       mensaje = "";

        if (!detalles.Any())
        {
            mensaje = "Debe agregar al menos un gasto en el detalle.";
            return;
        }

        // Validación contra presupuesto
        var sobregiros = new List<string>();
        foreach (var detalle in detalles)
        {
            var mes = encabezado.Fecha.Month;
            var anio = encabezado.Fecha.Year;

            var presupuesto = await Db.Presupuestos
            .Include(d => d.TipoGasto)    
            .Where(p => p.UsuarioId == encabezado.UsuarioId &&
                            p.TipoGastoId == detalle.TipoGastoId &&
                            p.Mes == mes &&
                            p.Anio == anio)
                .FirstOrDefaultAsync();

         var yaGastado = await Db.GastoDetalles
        .Include(d => d.Gasto)
        .Where(d =>
            d.Gasto != null &&
            d.TipoGastoId == detalle.TipoGastoId &&
            d.Gasto.Fecha.Month == mes &&
            d.Gasto.Fecha.Year == anio &&
            d.Gasto.UsuarioId == encabezado.UsuarioId
    )
    .SumAsync(d => (decimal?)d.Monto) ?? 0;

            if (presupuesto != null && (yaGastado + detalle.Monto) > presupuesto.Monto)
            {
                var exceso = (yaGastado + detalle.Monto) - presupuesto.Monto;
                var tipoNombre = tiposGasto.FirstOrDefault(t => t.Id == detalle.TipoGastoId)?.Nombre ?? "(Desconocido)";
                sobregiros.Add($"• {tipoNombre}: presupuestado {presupuesto.Monto:C}, sobregirado {exceso:C}");
            }
        }

        if (sobregiros.Any())
        {
            mensaje = "Presupuesto excedido en:\n" + string.Join("\n", sobregiros);
            return;
        }

        using var tx = await Db.Database.BeginTransactionAsync();
        try
        {
            Db.Gastos.Add(encabezado);
            await Db.SaveChangesAsync();

            foreach (var detalle in detalles)
            {
                detalle.GastoId = encabezado.Id;
                Db.GastoDetalles.Add(detalle);
            }

            await Db.SaveChangesAsync();
            await tx.CommitAsync();

            // Mostrar mensaje y esperar antes de redirigir
            mensajeOk = "Gasto y detalle guardado con éxito.";
            StateHasChanged(); 
            await Task.Delay(2000); // espera 3 segundos

Navigation.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            mensaje = "Error al guardar: " + ex.Message;
            await tx.RollbackAsync();
        }
    }
}
